@using E_CommerceAR.Extensions;

@{
    string lang = Context.Session.GetString("E-CommerceAR_Lang") ?? "en";
    string language = lang == "ar-Pl" ? "ar" : "en";
    string dir = lang == "ar-Pl" ? "rtl" : "ltr";
}
<aside class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3   bg-gradient-dark" id="sidenav-main" style="@(dir=="rtl" ? "right:0 !important" : "left:0 !important")">

</aside>

<main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
    <!-- Navbar -->
    <nav class="navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl" id="navbarBlur" data-scroll="true">

    </nav>
    <!-- End Navbar -->
    <div class="container-fluid">
    </div>

</main>
<div class="fixed-plugin">
    <a class="fixed-plugin-button text-dark position-fixed px-3 py-2" style="@(dir =="rtl"? "left: 30px !important;right: auto !important;" : "right: 30px !important;")">
        <i class="material-icons py-2">settings</i>
    </a>
    <div class="card shadow-lg">
        <div class="card-header pb-0 pt-3">
            <div class="float-start">
                <h5 class="mt-3 mb-0">Material UI Configurator</h5>
                <p>See our dashboard options.</p>
            </div>
            <div class="float-end mt-4">
                <button class="btn btn-link text-dark p-0 fixed-plugin-close-button">
                    <i class="material-icons">clear</i>
                </button>
            </div>
            <!-- End Toggle Button -->
        </div>
        <hr class="horizontal dark my-1">
        <div class="card-body pt-sm-3 pt-0">
            <!-- Sidebar Type -->
            <div class="mt-3">
                <h6 class="mb-0">@Html.Translate("لون الشريط الجانبي","Sidebar Color")</h6>
            </div>
            <div class="d-flex">
                <button class="btn bg-gradient-dark px-3 mb-2 active" data-class="bg-gradient-dark" onclick="sidebarType(this)">@Html.Translate("مظلم","Dark")</button>
                <button class="btn bg-gradient-dark px-3 mb-2 ms-2" data-class="bg-transparent" onclick="sidebarType(this)">@Html.Translate("شفاف","Transparent")</button>
                <button class="btn bg-gradient-dark px-3 mb-2 ms-2" data-class="bg-white" onclick="sidebarType(this)">@Html.Translate("أبيض","White")</button>
            </div>
            <hr class="horizontal dark my-3">

            <p class="text-sm d-xl-none d-block mt-2">You can change the sidenav type just on desktop view.</p>
            <!-- Navbar Fixed -->
            <div class="mt-3 d-flex">
                <h6 class="mb-0">@Html.Translate("تثبيت الشريط العلوي","Navbar Fixed")</h6>
                <div class="form-check form-switch ps-0 ms-auto my-auto">
                    <input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarFixed" onclick="navbarFixed(this)" style="@(dir == "en"? "right: 12rem;" : "")">
                </div>
            </div>
            <hr class="horizontal dark my-3">
            <div class="mt-2 d-flex">
                <h6 class="mb-0">@Html.Translate("فاتح/مظلم","Light / Dark")</h6>
                <div class="form-check form-switch ps-0 ms-auto my-auto">
                    <input class="form-check-input mt-1 ms-auto" type="checkbox" id="dark-version" onclick="darkMode(this)" style="@(dir == "en" ? "right: 12rem;" : "")">
                </div>
            </div>
            <hr class="horizontal dark my-3">

            <div class="mt-3">
                <h6 class="mb-0">@Html.Translate("اللغات","languages")</h6>
            </div>
            @if (lang == "en")
            {
                <button class="btn bg-gradient-dark px-3 mb-2 active" data-class="bg-gradient-dark" onclick="ChangeLangauge()">@Html.Translate("عربي","Arabic")</button>

            }
            else
            {
                <button class="btn bg-gradient-dark px-3 mb-2 ms-2 active" data-class="bg-transparent" onclick="ChangeLangauge()">@Html.Translate("انجليزي","English")</button>

            }

        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script>
    $('#sidenav-main').load('https://localhost:7251/AdminDashboard/Home/Menu')
    $('#navbarBlur').load('https://localhost:7251/AdminDashboard/Home/NavBar')


    function ChangeLangauge() {
        $.ajax({
            type: "POST",
            url: '../../Accounts/ChangeLanguage',
            success: function () {
                location.reload();
            },
        });
    }

    // Function to set a cookie with a given name, value, and expiration date
    function setCookie(name, value, expirationYears) {
        const date = new Date();
        date.setFullYear(date.getFullYear() + expirationYears);
        const expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
    }

    // Function to get the value of a cookie by name
    function getCookie(name) {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.startsWith(name + '=')) {
                return cookie.substring(name.length + 1);
            }
        }
        return "";
    }

    // Save settings to cookies
    function saveSettingsToCookies() {
        debugger
        const sidebarColor = $("#sidebarColorInput").val();
        const sidenavType = $("#sidenavTypeInput").val();
        const navbarFixed = $("#navbarFixed").prop('checked');
        const darkMode = $("#dark-version").prop('checked');

        setCookie("sidebarColor", sidebarColor, 10);
        setCookie("sidenavType", sidenavType, 10);
        setCookie("navbarFixed", navbarFixed, 10);
        setCookie("dark-version", darkMode, 10);
    }

    // Load settings from cookies
    function loadSettingsFromCookies() {
        debugger
        const sidebarColor = getCookie("sidebarColor");
        const sidenavType = getCookie("sidenavType");
        const navbarFixed = getCookie("navbarFixed");
        const darkMode = getCookie("dark-version");

        // Apply loaded settings to your UI elements
        $("#darkMode").val(sidebarColor);
        $("#navbarFixed").val(sidenavType);
        $("#navbarFixed").prop('checked', navbarFixed === "true"); // Convert string to boolean
        $("#dark-version").prop('checked', darkMode === "true"); // Convert string to boolean
        if (sidebarColor) {
            $(".badge.filter.active").removeClass("active"); // Clear previous active state
            $(`.badge.filter[data-color="${sidebarColor}"]`).addClass("active");
        }

        if (sidenavType) {
            // Assuming you have a div with an ID of "sidenav" that you want to change
            $("#sidenav").removeClass().addClass(sidenavType);
        }

        if (navbarFixed === "true") {
            // Assuming you have a navbar with an ID of "navbar" that you want to change
            $("#navbar").addClass("navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl position-sticky blur shadow-blur mt-4 left-auto top-1 z-index-sticky");
        }

        if (darkMode === "true") {
            // Assuming you have a body tag that you want to add a dark mode class
            $("body").addClass("dark-mode dark-version");
        }
    }

    // Event listener for when the page loads
    $(document).ready(function () {
        loadSettingsFromCookies();
    });

    // Event listener for when the settings change
    $(document).on("change", "#sidebarColorInput, #sidenavTypeInput, #navbarFixed, #dark-version", function () {
        debugger
        saveSettingsToCookies();
    });

</script>